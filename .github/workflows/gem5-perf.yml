name: gem5 Performance Test

on:
  push:
    branches: [ xs-dev ]
  pull_request:
    branches: [ xs-dev ]
  workflow_dispatch:
    inputs:
      run_perf_test:
        description: '运行性能测试'
        type: boolean
        default: false

jobs:
  run_performance_test:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_perf_test }}
    runs-on: self-hosted
    continue-on-error: false
    name: XS-GEM5 - Run performance test
    steps:
      - uses: actions/checkout@v2
      - name: Build DRAMSim
        run: |
          export GEM5_HOME=$(pwd)
          cd ext/dramsim3
          git clone git@github.com:umd-memsys/DRAMSim3.git DRAMsim3
          cd DRAMsim3 && mkdir -p build
          cd build
          cmake ..
          make -j 48
          cd $GEM5_HOME
      - name: Build GEM5 opt
        run: CC=gcc CXX=g++ scons build/RISCV/gem5.opt --linker=gold -j64
      - name: XS-GEM5 - Run performance test
        # run 80% coverage spec06 checkpoints, 500+ checkpoints
        run: |
          export GCBV_REF_SO="/nfs-nvme/home/share/zhenhao/ref-h/build/riscv64-nemu-interpreter-so"
          export GCB_RESTORER=""
          export GEM5_HOME=$(pwd)
          
          # 使用时间戳创建唯一的结果目录持久化存储在CI服务器中, 时间戳+commit_sha
          export TIME_STAMP=$(date +%Y%m%d_%H%M%S)
          export RESULT_ROOT="/tmp/ci_results/gem5_perf_test"
          export TEST_RESULT_DIR="$RESULT_ROOT/$TIME_STAMP-$GITHUB_SHA"
          
          # 创建结果目录并切换到该目录
          mkdir -p $TEST_RESULT_DIR
          cd $TEST_RESULT_DIR
          
          # 在目标目录下执行测试脚本
          bash $GEM5_HOME/util/xs_scripts/parallel_sim.sh \
            `realpath $GEM5_HOME/util/xs_scripts/kmh_6wide.sh` \
            /nfs/home/yanyue/workspace/spec06_cpts/spec_0.8c_int.lst \
            /nfs/home/share/jiaxiaoyu/simpoint_checkpoint_archive/spec06_rv64gcb_O3_20m_gcc12.2.0-intFpcOff-jeMalloc/zstd-checkpoint-0-0-0 \
            spec_all
      - name: Setup gem5_data_proc environment
        run: |
          # 克隆数据处理仓库到 CI 工作目录
          cd $GITHUB_WORKSPACE
          git clone https://github.com/shinezyy/gem5_data_proc
      - name: Check performance test result
        run: |
          # 添加yanyue的 Python 包路径, 包含pandas等
          export PYTHONPATH=/nfs/home/yanyue/.local/lib/python3.10/site-packages:$PYTHONPATH
          # 每次run 会进入新的shell, 需要重新设置GEM5_HOME
          export GEM5_HOME=$GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE/gem5_data_proc
          
          # 创建永久存储的处理结果目录
          mkdir -p $TEST_RESULT_DIR/processed_results
          
          # 生成测试报告并保存
          bash example-scripts/gem5-score-ci.sh \
            $TEST_RESULT_DIR/spec_all \
            /nfs/home/yanyue/workspace/spec06_cpts/cluster-0-0.json \
            > $TEST_RESULT_DIR/processed_results/score.txt

          cp $GITHUB_WORKSPACE/gem5_data_proc/results/ $TEST_RESULT_DIR/processed_results/ -r
            
          # 继续生成GitHub summary
          echo "### performance test result :rocket:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 42 $TEST_RESULT_DIR/processed_results/score.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # 提取关键指标
          FINAL_SCORE=$(grep "Estimated Int score per GHz:" $TEST_RESULT_DIR/processed_results/score.txt | awk '{print $NF}')
          echo "### Key indicators" >> $GITHUB_STEP_SUMMARY
          echo "- Final Int score per GHz: **${FINAL_SCORE}**" >> $GITHUB_STEP_SUMMARY
          # 记录一些元数据
          echo "CI Run Time: $TIME_STAMP" > $TEST_RESULT_DIR/meta.txt
          echo "Commit SHA: $GITHUB_SHA" >> $TEST_RESULT_DIR/meta.txt
          echo "Branch: $GITHUB_REF" >> $TEST_RESULT_DIR/meta.txt